<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="ABAP" deleted="false" description="BPC_AMDP_CLASS_FOR_MODELS" enabled="true" name="BPC_AMDP_CLASS_FOR_MODELS">CLASS ZCL_BPC_AMDP_MODELS DEFINITION&#13;
  PUBLIC&#13;
  FINAL&#13;
  CREATE PUBLIC .&#13;
&#13;
PUBLIC SECTION.&#13;
&#13;
 INTERFACES IF_AMDP_MARKER_HDB .&#13;
  CLASS-METHODS:  $$BPCMODEL  FOR TABLE function ZBPC_TF_$$BPCMODEL.&#13;
&#13;
PROTECTED SECTION.&#13;
PRIVATE SECTION.&#13;
ENDCLASS.&#13;
&#13;
&#13;
&#13;
CLASS ZCL_BPC_AMDP_MODELS IMPLEMENTATION.&#13;
METHOD $$BPCMODEL&#13;
    BY DATABASE FUNCTION FOR HDB&#13;
          LANGUAGE SQLSCRIPT&#13;
          OPTIONS READ-ONLY&#13;
&#13;
          USING ZVBPC_TIME ZCL_BPC_DERIVE_ADSO_FILTER=&gt;READ_REQ_TSN $$ADSO_VIEW UJA_APPL&#13;
          $$_1CPMB_CATEGORY_TABLE&#13;
          .&#13;
&#13;
declare im_fltr_string varchar( 1333 );&#13;
declare lv_adso varchar( 30 );&#13;
DECLARE string_list_version varchar( 1333 );&#13;
DECLARE bup_version varchar( 1333 );&#13;
&#13;
DECLARE EXIT HANDLER FOR SQLEXCEPTION&#13;
BEGIN&#13;
SELECT ::SQL_ERROR_CODE AS "ERROR_CODE", ::SQL_ERROR_MESSAGE AS "ERROR_MESSAGE" FROM SYS.DUMMY;&#13;
END;&#13;
&#13;
SELECT INFOCUBE INTO lv_adso FROM UJA_APPL WHERE APPSET_ID = $$APPSET_ID AND APPLICATION_ID = $$BPCMODEL;&#13;
&#13;
SELECT FILTER INTO im_fltr_string FROM "ZCL_BPC_DERIVE_ADSO_FILTER=&gt;READ_REQ_TSN"( :lv_adso ) ;&#13;
&#13;
if :p_version &lt;&gt; '*'&#13;
then&#13;
cte_splitv=&#13;
SELECT RESULT AS VERSION FROM SYS.SQLSCRIPT_STRING:SPLIT_TO_TABLE( :p_version, ',', -1)&#13;
ORDER BY 1;&#13;
else&#13;
p_version := ''; bup_version := :p_version;&#13;
cte_splitv=&#13;
SELECT DISTINCT "$$_CPMB_CATEGORY_TECHNAME" AS VERSION&#13;
FROM  "$$_1CPMB_CATEGORY_TABLE"&#13;
WHERE MANDT = session_context('CLIENT');&#13;
select STRING_AGG(VERSION, ',' ORDER BY version) into p_version FROM :cte_splitv;&#13;
end if;&#13;
&#13;
cte_$$BPCMODEL_all=&#13;
SELECT&#13;
"T"."MANDT",&#13;
"F"."REQTSN",&#13;
$$LIST_OF_FIELDS_SELECT&#13;
&#13;
SUBSTRING("F"."$$TIME_FIELD",6,2) AS "BASE_PERIOD",&#13;
SUBSTRING("F"."$$TIME_FIELD",1,4) AS "TIME_YEAR",&#13;
"T"."NEXT_MON",&#13;
"T"."PREV_MONT",&#13;
"T"."MONTHNUM",&#13;
"T"."PREVMONTHNUM",&#13;
"T"."YEAR_QTR",&#13;
"T"."QTR",&#13;
"T"."NUMDAY",&#13;
"T"."NUMWDAY",&#13;
("F"."/B28/S_SDATA") AS SIGNEDDATA&#13;
FROM "$$ADSO_VIEW" AS "F"&#13;
INNER JOIN ZVBPC_TIME AS "T" ON "T"."TIME" = "F"."$$TIME_FIELD"&#13;
INNER JOIN :cte_splitv as "V" ON "V"."VERSION" = "F"."$$CATEGORY_FIELD"&#13;
WHERE "T"."MANDT" = SESSION_CONTEXT( 'CDS_CLIENT' )&#13;
AND ( "F"."$$TIME_FIELD" BETWEEN :p_timefrom AND :p_timeto )&#13;
;&#13;
if :im_fltr_string &lt;&gt; '' then&#13;
cte_$$BPCMODEL= APPLY_FILTER( :cte_$$BPCMODEL_all, :im_fltr_string) ;&#13;
RETURN&#13;
SELECT&#13;
MANDT&#13;
$$LIST_OF_DIMENSIONS&#13;
&#13;
,BASE_PERIOD&#13;
,TIME_YEAR&#13;
,NEXT_MON&#13;
,PREV_MONT&#13;
,MONTHNUM&#13;
,PREVMONTHNUM&#13;
,YEAR_QTR&#13;
,QTR&#13;
,NUMDAY&#13;
,NUMWDAY&#13;
,SUM(SIGNEDDATA) AS SIGNEDDATA&#13;
FROM :cte_$$BPCMODEL&#13;
GROUP BY&#13;
MANDT&#13;
$$LIST_OF_DIMENSIONS&#13;
&#13;
,BASE_PERIOD&#13;
,TIME_YEAR&#13;
,NEXT_MON&#13;
,PREV_MONT&#13;
,MONTHNUM&#13;
,PREVMONTHNUM&#13;
,YEAR_QTR&#13;
,QTR&#13;
,NUMDAY&#13;
,NUMWDAY;&#13;
else&#13;
RETURN&#13;
SELECT&#13;
MANDT&#13;
$$LIST_OF_DIMENSIONS&#13;
&#13;
,BASE_PERIOD&#13;
,TIME_YEAR&#13;
,NEXT_MON&#13;
,PREV_MONT&#13;
,MONTHNUM&#13;
,PREVMONTHNUM&#13;
,YEAR_QTR&#13;
,QTR&#13;
,NUMDAY&#13;
,NUMWDAY&#13;
,SUM(SIGNEDDATA) AS SIGNEDDATA&#13;
FROM :cte_ATP_all&#13;
GROUP BY&#13;
MANDT&#13;
$$LIST_OF_DIMENSIONS&#13;
&#13;
,BASE_PERIOD&#13;
,TIME_YEAR&#13;
,NEXT_MON&#13;
,PREV_MONT&#13;
,MONTHNUM&#13;
,PREVMONTHNUM&#13;
,YEAR_QTR&#13;
,QTR&#13;
,NUMDAY&#13;
,NUMWDAY;&#13;
end if;&#13;
&#13;
&#13;
ENDMETHOD. "$$BPCMODEL&#13;
ENDCLASS. "ZCL_BPC_AMDP_MODELS</template></templates>
